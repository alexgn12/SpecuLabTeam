

CRITERIOS DE ACEPTACIÓN

Product Owner: Tomás Orejas

		CONSOLA:

1. Crear JSON con datos de compras
	- El JSON debe simular al menos 5 edificios.

	- Cada entrada debe tener: Nombre, Id, Apartamentos por piso, Precio.

	- El archivo debe guardarse como buildings.json.

	- El programa debe contener un .json local y un.json en la nube

2. Clase Edificio
	- Contendrá identificadores necesarios para enlazar con transacciones: Guid Id, string Nombre, string Dirección.

3. Programa de visualización por consola
	- Debe mostrar tres listas de edificios. Estas deben de estar creadas en tres formas diferentes.

	- Formato legible: “Edificio: Edificio A, ID: 1, Pisos: 5, Tiene Ascensor: True, Apartamentos por piso: 4, Precio: 150000”

	- Debe ejecutarse desde consola sin errores.

4. Deserializar el JSON en objetos
	- El programa debe deserializar correctamente .json a una lista de objetos CompraTransaccion.

	- La deserialización debe validar que hay al menos 1 objeto cargado correctamente.

5. Lista de estos objetos
	- Los datos del .json se almacenan en un List<Building>.



		API:
1. Definición de los endpoints
	- GET /api/requests → Listar todas las solicitudes

	- POST /api/requests → Crear una nueva solicitud

	- GET /api/requests/{id} → 

2. Definición de los APIs
	- Las API deben centrarse en peticiones de edificios.

	- Las validaciones deben garantizar: importe > 0, fechas válidas, id diferentes, strings legibles.


		DIAGRAMAS:
1. Proceso de petición compra por edificios
	- Solicitud → Pendiente de revisión → Rechazar o aceptar → Actualizar presupuesto.

2. Proceso de alquileres
	- Notificación de pago recibida → Registro en historial → Actualizar presupuesto.

3. Proceso mantenimiento
	-  Solicitud → Pendiente de revisión → Rechazar o aceptar → Actualizar presupuesto.


