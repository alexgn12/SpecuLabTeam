Generar un componente que muestre el historial.
El historial está en:

{
  "openapi": "3.0.1",
  "info": {
    "title": "PrototipoApi",
    "version": "1.0"
  },
  "paths": {
    "/api/Ang/resumen-requests": {
      "get": {
        "tags": [
          "Ang"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Ang/gasto-mensual": {
      "get": {
        "tags": [
          "Ang"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Ang/buildings-count-by-district": {
      "get": {
        "tags": [
          "Ang"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Ang/edificios-comprados-count": {
      "get": {
        "tags": [
          "Ang"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Ang/aprobados-e-ingresos": {
      "get": {
        "tags": [
          "Ang"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Apartments": {
      "get": {
        "tags": [
          "Apartments"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "CreatedDate"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApartmentDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApartmentDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApartmentDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Apartments"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Apartments/{id}": {
      "get": {
        "tags": [
          "Apartments"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApartmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Building": {
      "get": {
        "tags": [
          "Building"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "floorCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Building"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Building/{id}": {
      "get": {
        "tags": [
          "Building"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/managementbudgets": {
      "get": {
        "tags": [
          "ManagementBudgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementBudgetDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementBudgetDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementBudgetDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/managementbudgets/{id}": {
      "get": {
        "tags": [
          "ManagementBudgets"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "ManagementBudgets"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagementBudgetDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagementBudgetDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagementBudgetDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagementBudgetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/requests": {
      "get": {
        "tags": [
          "Requests"
        ],
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Desc",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Requests"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/requests/{id}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Requests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/requests/{id}/amounts": {
      "put": {
        "tags": [
          "Requests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/requests/{buildingCode}/amounts": {
      "put": {
        "tags": [
          "Requests"
        ],
        "parameters": [
          {
            "name": "buildingCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/request-status-history": {
      "get": {
        "tags": [
          "RequestStatusHistory"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "requestId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Status"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/status/{id}": {
      "get": {
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/status/type/{statusType}": {
      "get": {
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "name": "statusType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "transactionType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "year",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/transactions/{id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApartmentDto": {
        "type": "object",
        "properties": {
          "apartmentId": {
            "type": "integer",
            "format": "int32"
          },
          "apartmentCode": {
            "type": "string",
            "nullable": true
          },
          "apartmentDoor": {
            "type": "string",
            "nullable": true
          },
          "apartmentFloor": {
            "type": "string",
            "nullable": true
          },
          "apartmentPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfRooms": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfBathrooms": {
            "type": "integer",
            "format": "int32"
          },
          "buildingId": {
            "type": "integer",
            "format": "int32"
          },
          "hasLift": {
            "type": "boolean"
          },
          "hasGarage": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BuildingDto": {
        "type": "object",
        "properties": {
          "buildingId": {
            "type": "integer",
            "format": "int32"
          },
          "buildingCode": {
            "type": "string",
            "nullable": true
          },
          "buildingName": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "floorCount": {
            "type": "integer",
            "format": "int32"
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateRequestDto": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "buildingAmount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "maintenanceAmount": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "buildingCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateStatusDto": {
        "type": "object",
        "properties": {
          "statusType": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTransactionDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "apartmentCode": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ManagementBudgetDto": {
        "type": "object",
        "properties": {
          "managementBudgetId": {
            "type": "integer",
            "format": "int32"
          },
          "currentAmount": {
            "type": "number",
            "format": "double"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "RequestDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "format": "int32"
          },
          "buildingAmount": {
            "type": "number",
            "format": "double"
          },
          "maintenanceAmount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "statusType": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "buildingId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StatusDto": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusType": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "transactionType": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "buildingAmount": {
            "type": "number",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UpdateManagementBudgetDto": {
        "required": [
          "currentAmount"
        ],
        "type": "object",
        "properties": {
          "currentAmount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpdateRequestDto": {
        "required": [
          "maintenanceAmount"
        ],
        "type": "object",
        "properties": {
          "maintenanceAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      }
    }
  }
}

Crea el servicio para accder a la api.

Y quiero un listado del historial: 
- requestId
- Descripcion
- oldStatusType
- newStatusType
- changeDate (formatea la fecha como 20/10/2025 14:30)
- comment

Quiero que se pueda paginar

Filtrar por Fecha (desde - hasta) y por requestid



Claro, aquí tienes la información que solicitaste transformada en un **PRD** y, posteriormente, un **resumen del servicio y el componente de Angular** para cumplir con los requisitos.

-----

## 1\. Documento de Requisitos de Producto (PRD)

### Visión General del Proyecto

**Nombre del Componente:** Historial de Solicitudes (Request History)

**Objetivo:** Desarrollar un componente de interfaz de usuario en Angular que permita a los administradores del sistema o usuarios autorizados visualizar el historial de cambios de estado de las solicitudes. Este componente debe ser flexible, fácil de usar y consumir de manera eficiente los datos de la API de backend existente.

**Público Objetivo:** Usuarios con rol de administrador o personal de soporte que necesitan auditar o revisar el estado de una solicitud a lo largo del tiempo.

-----

### Requisitos Funcionales y No Funcionales

#### 1\. Requisitos Funcionales

  * **Visualización del Historial:** El componente debe mostrar una tabla o lista con los registros del historial de solicitudes.
  * **Datos de la Tabla:** La tabla debe mostrar las siguientes columnas, obteniendo la información del `RequestStatusHistoryDto` y otras entidades relacionadas del backend:
      * `requestId`
      * `Descripción` (del Request)
      * `oldStatusType` (del Status anterior)
      * `newStatusType` (del Status nuevo)
      * `changeDate` (fecha y hora del cambio)
      * `comment`
  * **Paginación:** La tabla debe incluir controles de paginación para navegar por grandes conjuntos de datos. Se usarán los parámetros `page` y `pageSize` del *endpoint* `/api/request-status-history`. El tamaño de página por defecto será 10.
  * **Filtros:** Se debe implementar una interfaz de usuario que permita a los usuarios filtrar el historial usando los siguientes criterios:
      * **Rango de Fechas:** Dos selectores de fecha (`fromDate` y `toDate`) para limitar los resultados por el campo `changeDate`.
      * **ID de Solicitud (`requestId`):** Un campo de texto para buscar el historial de una solicitud específica.
  * **Formato de Fecha:** La fecha de cambio (`changeDate`) debe mostrarse en el formato `DD/MM/YYYY HH:mm`.

#### 2\. Requisitos de Interfaz de Usuario (UI)

  * **Diseño:** El componente debe seguir el estilo de diseño general de la aplicación.
  * **Experiencia de Usuario (UX):** La paginación y los filtros deben ser intuitivos y fáciles de usar. Se debe proporcionar un botón de "buscar" o "aplicar filtros" para ejecutar la consulta.

#### 3\. Requisitos Técnicos

  * **API de Backend:** El componente consumirá el *endpoint* `GET /api/request-status-history` de la API de backend, según la documentación de OpenAPI proporcionada.
  * **Servicio Angular:** Se creará un nuevo servicio en Angular (`RequestStatusHistoryService`) para manejar las llamadas HTTP a la API. Este servicio encapsulará la lógica de las peticiones, incluyendo el manejo de los parámetros de paginación y filtrado.

-----

## 2\. Servicio y Componente en Angular

### 1\. Servicio de Historial de Solicitudes (`request-status-history.service.ts`)

Este servicio encapsulará la lógica de comunicación con el backend.
Este servicio encapsulará la lógica de comunicación con el backend, gestionando la llamada HTTP al *endpoint* del historial.

```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { RequestStatusHistoryDto } from './models/request-status-history.dto'; // Asume un DTO tipado

@Injectable({
  providedIn: 'root'
})
export class RequestStatusHistoryService {
  private apiUrl = '/api/request-status-history';

  constructor(private http: HttpClient) { }

  getHistory(
    page: number, 
    pageSize: number, 
    fromDate?: string, 
    toDate?: string, 
    requestId?: number
  ): Observable<RequestStatusHistoryDto[]> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('pageSize', pageSize.toString());

    if (fromDate) {
      params = params.set('fromDate', fromDate);
    }
    if (toDate) {
      params = params.set('toDate', toDate);
    }
    if (requestId) {
      params = params.set('requestId', requestId.toString());
    }

    return this.http.get<RequestStatusHistoryDto[]>(this.apiUrl, { params });
  }
}
```

### 2\. Componente de Historial (`request-history.component.ts`)

Este componente se encargará de la lógica de presentación y de llamar al servicio.

```typescript
import { Component, OnInit } from '@angular/core';
import { RequestStatusHistoryService } from './request-status-history.service';
import { RequestStatusHistoryDto } from './models/request-status-history.dto';
import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-request-history',
  templateUrl: './request-history.component.html',
  styleUrls: ['./request-history.component.css'],
  providers: [DatePipe]
})
export class RequestHistoryComponent implements OnInit {
  history: RequestStatusHistoryDto[] = [];
  page = 1;
  pageSize = 10;
  totalRecords = 0; // Asumimos que la API devuelve este valor en los headers o en la respuesta
  fromDate: string | null = null;
  toDate: string | null = null;
  requestId: number | null = null;

  constructor(
    private historyService: RequestStatusHistoryService,
    private datePipe: DatePipe
  ) { }

  ngOnInit(): void {
    this.fetchHistory();
  }

  fetchHistory(): void {
    this.historyService.getHistory(
      this.page, 
      this.pageSize, 
      this.fromDate, 
      this.toDate, 
      this.requestId
    ).subscribe(data => {
      this.history = data;
      // Aquí se debe manejar el totalRecords si la API lo devuelve
    });
  }

  onPageChange(event: any): void {
    this.page = event.pageIndex + 1;
    this.pageSize = event.pageSize;
    this.fetchHistory();
  }

  applyFilters(): void {
    this.page = 1; // Reinicia la paginación al aplicar filtros
    this.fetchHistory();
  }

  formatDate(date: string): string {
    return this.datePipe.transform(date, 'dd/MM/yyyy HH:mm') || '';
  }
}
```

### 3\. Plantilla HTML del Componente (`request-history.component.html`)

Esta plantilla manejará la interfaz de usuario para mostrar la tabla, los filtros y los controles de paginación.

```html
<div class="request-history-container">
  <h2>Historial de Solicitudes</h2>

  <div class="filters">
    <label for="requestId">ID de Solicitud:</label>
    <input id="requestId" type="number" [(ngModel)]="requestId">

    <label for="fromDate">Desde:</label>
    <input id="fromDate" type="date" [(ngModel)]="fromDate">

    <label for="toDate">Hasta:</label>
    <input id="toDate" type="date" [(ngModel)]="toDate">
    
    <button (click)="applyFilters()">Aplicar Filtros</button>
  </div>
  
  <div class="history-table">
    <table>
      <thead>
        <tr>
          <th>ID de Solicitud</th>
          <th>Descripción</th>
          <th>Estado Anterior</th>
          <th>Estado Nuevo</th>
          <th>Fecha de Cambio</th>
          <th>Comentario</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let item of history">
          <td>{{ item.requestId }}</td>
          <td>{{ item.requestDescription }}</td>
          <td>{{ item.oldStatusType }}</td>
          <td>{{ item.newStatusType }}</td>
          <td>{{ formatDate(item.changeDate) }}</td>
          <td>{{ item.comment }}</td>
        </tr>
      </tbody>
    </table>
  </div>
  
  <mat-paginator 
    [length]="totalRecords"
    [pageSize]="pageSize"
    [pageSizeOptions]="[5, 10, 25, 100]"
    (page)="onPageChange($event)">
  </mat-paginator>

</div>
```

[Angular - Services & Dependency Injection | HTTP service Architecture](https://www.youtube.com/watch?v=6Owtoy0avA8) Este video puede ser útil para entender cómo usar servicios e inyección de dependencias con HttpClient en Angular, lo cual es fundamental para el componente que necesitas.
http://googleusercontent.com/youtube_content/0

